# - ./client/build:/usr/share/nginx/html:consistent
version: "3"

services:
    app:
        container_name: styl-app-prod
        platform: "linux/amd64"
        restart: always
        working_dir: /app
        expose:
            - "8000"
        ports:
            - "8000:8000"
        environment:
            PORT: 8000
        env_file:
            - ./.env
            - ./.env.prod
        volumes:
            - .:/app:consistent
        build:
            context: .
            dockerfile: Dockerfile
        command:
            [
                "uvicorn",
                "src.main:app",
                "--root-path",
                "/api",
                "--host",
                "0.0.0.0",
                "--port",
                "8000",
                "--proxy-headers",
            ]
        depends_on:
            psql:
                condition: service_healthy
        networks:
            - style-network
    psql:
        image: postgres:latest
        container_name: postgres-prod
        restart: always
        ports:
            - "6000:5432"
        environment:
            POSTGRES_USER: "postgres"
            POSTGRES_PASSWORD: "password"
            PGDATA: /data/postgres
        volumes:
            - ./db/:/data/postgres
            - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 10s
            retries: 3
            start_period: 30s
        networks:
            - style-network
    client:
        container_name: styl-front-prod
        platform: "linux/amd64"
        restart: always
        working_dir: /app
        expose:
            - "80"
        ports:
            - 80:80
            - 443:443
        environment:
            PORT: 80
        env_file:
            - ./.env
            - ./.env.prod
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/log:/var/log/nginx

            # certbot volumes
            - /etc/letsencrypt:/etc/letsencrypt
            - /var/lib/letsencrypt:/var/lib/letsencrypt/ # /var/lib/letsencrypt 는 certbot의 webroot
        build:
            context: ./client
            dockerfile: Dockerfile.prod
        depends_on:
            - app
        networks:
            - style-network
networks:
    style-network:
        driver: bridge
